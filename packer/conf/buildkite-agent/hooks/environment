#!/bin/bash

set -eu -o pipefail

s3_bucket_region() {
  aws s3api get-bucket-location \
      --bucket "$1" \
      --query LocationConstraint \
      --output text
}

s3_exists() {
  local bucket="$1"
  local key="$2"
  local bucket_region

  if ! bucket_region=$(s3_bucket_region "$1") ; then
    return $?
  fi

  if ! env -i aws s3api head-object --bucket "$bucket" --key "$key" 1>/dev/null ; then
    return 1
  fi
}

s3_download() {
  local bucket="$1"
  local key="$2"
  local bucket_region
  local aws_s3_args=("--quiet" "--region=$bucket_region")

  bucket_region=$(s3_bucket_region "$1") || exit 1

  if [[ -n "${BUILDKITE_SECRETS_KEY:-}" ]] ; then
    aws_s3_args+=("--sse-c" "AES256" "--sse-c-key" "${BUILDKITE_SECRETS_KEY}")
  elif [[ -n "${BUILDKITE_USE_KMS:-}" ]] ; then
    aws_s3_args+=("--sse" "aws:kms")
  fi

  if ! env -i aws s3 cp ${aws_s3_args[@]} "$1" /dev/stdout ; then
    exit 1
  fi
}

echo "~~~ Setting up the environment"

echo "Sourcing CloudFormation environment..."
eval "$(cat ~/cfn-env)"
echo

echo "Starting an SSH Agent..."
eval "$(ssh-agent -s)"
echo

if [[ -n "${BUILDKITE_SECRETS_BUCKET:-}" ]] ; then
  echo "Downloading secrets from ${BUILDKITE_SECRETS_BUCKET}..."
  echo

  # Allow environment vars set in Buildkite to override paths
  secrets_prefix="${BUILDKITE_SECRETS_PREFIX:-$BUILDKITE_PIPELINE_SLUG}"

  # Locations to check for ssh keys
  ssh_key_paths=(
    "$secrets_prefix/${SSH_KEY_NAME:-private_ssh_key}"
    "$secrets_prefix/id_rsa_github"
    "${SHARED_SSH_KEY_NAME:-private_ssh_key}"
    "id_rsa_github"
  )

  for key in ${ssh_key_paths[*]} ; do
    if s3_exists "${BUILDKITE_SECRETS_BUCKET}" "$key" ; then
      echo "Downloading ssh-key $key"
      SSH_ASKPASS="/bin/false" ssh-add <(s3_download "${BUILDKITE_SECRETS_BUCKET}" "$key")
      break
    fi
  done

  env_paths=(
    "env"
    "${secrets_prefix}/env"
  )

  for key in ${env_paths[*]} ; do
    if s3_exists "${BUILDKITE_SECRETS_BUCKET}" "$key" ; then
      echo "Downloading env $key"
      eval "$(s3_download "${BUILDKITE_SECRETS_BUCKET}" "$key")"
    fi
  done
fi

echo "Waiting for Docker..."
timeout 30 docker ps
echo

unset BUILDKITE_SECRETS_BUCKET
unset BUILDKITE_SECRETS_KEY

# We need to scope the next bit to only the currently running agent's builds,
# but we also need to control security and make sure arbitrary folders can't be
# chmoded.
#
# The agent builds path isn't exposed nicely by itself. The agent name also
# doesn't quite map to its builds path. We do have a complete checkout path,
# but we need to chop it up, safely. The path looks like:
#
#   BUILDKITE_BUILD_CHECKOUT_PATH="/var/lib/buildkite-agent/builds/my-agent-1/my-pipeline-blah"
#
# We know the beginning of this path, it's in BUILDKITE_BUILD_PATH:
#
#   BUILDKITE_BUILD_PATH="/var/lib/buildkite-agent/builds"

# So we can calculate the suffix as a substring:
BUILD_PATH_SUFFIX="${BUILDKITE_BUILD_CHECKOUT_PATH#${BUILDKITE_BUILD_PATH}/}"
# => "my-agent-1/my-pipeline-blah"

# Then we can grab just the first path component by removing the longest suffix starting with a slash:
AGENT_BUILD_NAME="${BUILD_PATH_SUFFIX%%/*}"
# => "my-agent-1"

# Now we can pass this to the sudo script which will validate it before safely chmodding:
echo "Fixing permissions for '${AGENT_BUILD_NAME}'..."
sudo /usr/bin/fix-buildkite-agent-builds-permissions "${AGENT_BUILD_NAME}"
echo
